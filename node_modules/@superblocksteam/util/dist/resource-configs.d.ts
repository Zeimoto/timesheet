export type SuperblocksMetadata = {
    cliVersion: string;
};
export type SuperblocksResourceType = "APPLICATION" | "BACKEND";
export type VersionedResourceConfig = {
    location: string;
    resourceType: SuperblocksResourceType;
};
export type SuperblocksResourceConfig = {
    id: string;
};
export type SuperblocksBackendConfig = SuperblocksResourceConfig & {
    configType: "BACKEND";
};
export type SuperblocksApplicationConfig = SuperblocksResourceConfig & {
    configType: "APPLICATION";
    defaultPageId?: string;
    apis: Record<string, string>;
    pages?: Record<string, {
        id: string;
        name: string;
        apis: Record<string, string>;
    }>;
};
export type SuperblocksMonorepoConfig = {
    configType: "ROOT";
    resources: Record<string, VersionedResourceConfig>;
    metadata: SuperblocksMetadata;
};
export type SuperblocksConfig = SuperblocksMonorepoConfig | SuperblocksApplicationConfig | SuperblocksBackendConfig;
/**
 * Get the Superblocks config file from the current directory (and optionally) hierarchy
 * @param checkParentDir Whether to recursively check the parent directory for a Superblocks config file
 */
export declare function getSuperblocksMonorepoConfigJson(checkParentDir?: boolean, pathPrefix?: string): Promise<[SuperblocksMonorepoConfig, string]>;
export declare function getSuperblocksApplicationConfigJson(applicationPath?: string): Promise<SuperblocksApplicationConfig>;
export declare function getSuperblocksApplicationConfigIfExists(applicationPath: string): Promise<SuperblocksApplicationConfig | undefined>;
export declare function getSuperblocksBackendConfigJson(): Promise<SuperblocksBackendConfig>;
export declare function getSuperblocksResourceConfigIfExists(): Promise<SuperblocksResourceConfig | undefined>;
