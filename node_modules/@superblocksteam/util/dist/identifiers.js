"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.isReservedPropertyName = exports.isValidIdentifier = exports.suggestIdentifier = void 0;
// convert a string to upper camel case, e.g. "123 & this is my component, foo-bar" -> "123ThisIsMyComponentFooBar"
function wordsToUpperCamelCase(str) {
    return str
        .split(/[^A-Za-z0-9_]+/)
        .filter(Boolean)
        .map((word) => word[0].toUpperCase() + word.slice(1))
        .join("");
}
const digits = "Zero One Two Three Four Five Six Seven Eight Nine".split(" ");
// convert digits to words, e.g. "123" -> "OneTwoThree"
function digitsToWords(str) {
    return str.replace(/\d/g, (char) => { var _a; return (_a = digits[parseInt(char, 10)]) !== null && _a !== void 0 ? _a : char; });
}
/**
 * Suggest an identifier based on a label, e.g. `My Component` -> `myComponent`.
 * @param label The label to suggest an identifier for.
 * @param capitalizeFirst Whether to capitalize the first letter of the identifier.
 */
function suggestIdentifier(label, capitalizeFirst = false) {
    const upperCamelCase = wordsToUpperCamelCase(label)
        // convert any digits at the start of the string to words as these are not valid in identifiers
        .replace(/^\d+/, digitsToWords);
    if (capitalizeFirst) {
        return upperCamelCase;
    }
    else {
        return upperCamelCase[0].toLowerCase() + upperCamelCase.slice(1);
    }
}
exports.suggestIdentifier = suggestIdentifier;
const IdentifierRegex = /^[a-zA-Z_][a-zA-Z0-9_]*$/;
function isValidIdentifier(str) {
    return IdentifierRegex.test(str);
}
exports.isValidIdentifier = isValidIdentifier;
const reservedPropertyNames = new Set([
    "ENTITY_TYPE",
    "bindingPaths",
    "bottomRow",
    "dynamicBindingPathList",
    "dynamicTriggerPathList",
    "gridColumns",
    "gridRows",
    "height",
    "isLoading",
    "isVisible",
    "leftColumn",
    "parentId",
    "rightColumn",
    "snapColumns",
    "snapRows",
    "top",
    "topRow",
    "type",
    "widgetId",
    "widgetLastChange",
    "widgetName",
    "width",
]);
function isReservedPropertyName(str) {
    return (reservedPropertyNames.has(str) ||
        // also treat any property name starting with "default_" as reserved since we use this prefix for default properties
        str.startsWith("default_"));
}
exports.isReservedPropertyName = isReservedPropertyName;
