"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.getSuperblocksResourceConfigIfExists = exports.getSuperblocksBackendConfigJson = exports.getSuperblocksApplicationConfigIfExists = exports.getSuperblocksApplicationConfigJson = exports.getSuperblocksMonorepoConfigJson = void 0;
const tslib_1 = require("tslib");
const path_1 = tslib_1.__importDefault(require("path"));
const fs = tslib_1.__importStar(require("fs-extra"));
const constants_1 = require("./constants");
/**
 * Get the Superblocks config file from the current directory (and optionally) hierarchy
 * @param checkParentDir Whether to recursively check the parent directory for a Superblocks config file
 */
async function getSuperblocksMonorepoConfigJson(checkParentDir = false, pathPrefix = "") {
    const absolutePath = path_1.default.resolve(pathPrefix);
    let hasReachedFilesystemRoot = false;
    try {
        hasReachedFilesystemRoot = path_1.default.parse(absolutePath).root == absolutePath;
    }
    catch {
        throw new Error("Could not parse path " + absolutePath);
    }
    let superblocksConfig;
    if ((pathPrefix && !fs.existsSync(absolutePath)) ||
        hasReachedFilesystemRoot) {
        throw new Error("No Superblocks config file found in current directory hierarchy " +
            pathPrefix);
    }
    const attemptedPath = path_1.default.join(absolutePath, constants_1.RESOURCE_CONFIG_PATH);
    try {
        superblocksConfig = await fs.readJSON(attemptedPath);
        if (superblocksConfig.configType !== "ROOT") {
            throw new Error("Not the root Superblocks config file");
        }
        return [superblocksConfig, attemptedPath];
    }
    catch {
        if (!checkParentDir) {
            // no superblocks config file found
            throw new Error("No Superblocks config file found in current directory " + attemptedPath);
        }
        return getSuperblocksMonorepoConfigJson(true, "../" + pathPrefix);
    }
}
exports.getSuperblocksMonorepoConfigJson = getSuperblocksMonorepoConfigJson;
async function getSuperblocksApplicationConfigJson(applicationPath) {
    let superblocksConfig;
    try {
        const configPath = applicationPath
            ? path_1.default.join(applicationPath, constants_1.RESOURCE_CONFIG_PATH)
            : constants_1.RESOURCE_CONFIG_PATH;
        superblocksConfig = await fs.readJSON(configPath);
    }
    catch {
        // no superblocks config file found
        throw new Error("This command must be run within a Superblocks app directory.");
    }
    if (superblocksConfig.configType !== "APPLICATION") {
        throw new Error("Please execute this command within a Superblocks application directory.");
    }
    return superblocksConfig;
}
exports.getSuperblocksApplicationConfigJson = getSuperblocksApplicationConfigJson;
async function getSuperblocksApplicationConfigIfExists(applicationPath) {
    let superblocksConfig;
    try {
        const configPath = applicationPath
            ? path_1.default.join(applicationPath, constants_1.RESOURCE_CONFIG_PATH)
            : constants_1.RESOURCE_CONFIG_PATH;
        superblocksConfig = await fs.readJSON(configPath);
    }
    catch {
        // no superblocks config file found
    }
    if ((superblocksConfig === null || superblocksConfig === void 0 ? void 0 : superblocksConfig.configType) !== "APPLICATION") {
        return undefined;
    }
    return superblocksConfig;
}
exports.getSuperblocksApplicationConfigIfExists = getSuperblocksApplicationConfigIfExists;
async function getSuperblocksBackendConfigJson() {
    let superblocksConfig;
    try {
        superblocksConfig = await fs.readJSON(constants_1.RESOURCE_CONFIG_PATH);
    }
    catch {
        // no superblocks config file found
        throw new Error("This command must be run within a Superblocks backend resource (workflow/job) directory.");
    }
    if (superblocksConfig.configType !== "BACKEND") {
        throw new Error("Please execute this command within a Superblocks backend resource (workflow/job) directory.");
    }
    return superblocksConfig;
}
exports.getSuperblocksBackendConfigJson = getSuperblocksBackendConfigJson;
async function getSuperblocksResourceConfigIfExists() {
    let config;
    try {
        config = await getSuperblocksApplicationConfigJson();
    }
    catch {
        // Noop
    }
    try {
        config = await getSuperblocksBackendConfigJson();
    }
    catch {
        // Noop
    }
    return config;
}
exports.getSuperblocksResourceConfigIfExists = getSuperblocksResourceConfigIfExists;
