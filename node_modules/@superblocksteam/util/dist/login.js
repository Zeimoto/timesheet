"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.getLocalTokenWithUrl = exports.getLocalTokenWithUrlIfExists = exports.saveApiToken = void 0;
const tslib_1 = require("tslib");
const node_os_1 = require("node:os");
const node_path_1 = require("node:path");
const fs = tslib_1.__importStar(require("fs-extra"));
const constants_1 = require("./constants");
async function saveApiToken(superblocksBaseUrl, token) {
    try {
        await fs.ensureDir((0, node_path_1.join)((0, node_os_1.homedir)(), ".superblocks"));
        if (token) {
            const tokenConfig = {
                superblocksBaseUrl,
                token,
            };
            await fs.writeJSON((0, node_path_1.join)((0, node_os_1.homedir)(), constants_1.TOKEN_CONFIG_PATH), tokenConfig);
        }
        else {
            const tokenConfig = {
                superblocksBaseUrl,
            };
            await fs.writeJSON((0, node_path_1.join)((0, node_os_1.homedir)(), constants_1.TOKEN_CONFIG_PATH), tokenConfig);
        }
    }
    catch {
        throw new constants_1.FileAccessError("Could not save token");
    }
}
exports.saveApiToken = saveApiToken;
async function getLocalTokenWithUrlIfExists() {
    try {
        return await getLocalTokenWithUrl();
    }
    catch {
        return undefined;
    }
}
exports.getLocalTokenWithUrlIfExists = getLocalTokenWithUrlIfExists;
async function getLocalTokenWithUrl() {
    try {
        const tokenConfig = await fs.readJSON((0, node_path_1.join)((0, node_os_1.homedir)(), constants_1.TOKEN_CONFIG_PATH));
        if (tokenConfig.token) {
            // user logged in
            return {
                token: tokenConfig.token,
                superblocksBaseUrl: tokenConfig.superblocksBaseUrl,
            };
        }
        else {
            // user not logged in, but set domain
            return {
                superblocksBaseUrl: tokenConfig.superblocksBaseUrl,
            };
        }
    }
    catch {
        throw new Error("No local API key found");
    }
}
exports.getLocalTokenWithUrl = getLocalTokenWithUrl;
