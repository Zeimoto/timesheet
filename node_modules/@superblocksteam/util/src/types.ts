import { type UUID } from "node:crypto";
import { type DataType } from "./data-types";

interface PropertiesPanelDisplay<T extends DataType> {
  /**
   * Determines what form item type is shown in the Superblocks properties panel.
   *
   * Only booleans are allowed to use the "switch" control
   */
  controlType: T extends "boolean"
    ? "text" | "js-expr" | "switch"
    : "text" | "js-expr";

  /**
   * Determines form item label in the Superblocks properties panel.
   */
  label: string;

  /**
   * Placeholder text appears as gray text in the properties panel. This only applies
   * to text-like inputs.
   */
  placeholder?: string;

  /**
   * This shows up in the popover as a user types into the properties panel.
   * This is a documentation field that helps users understand what type of data is accepted
   * by this property. You should give a specific example, not a generic type
   *
   * @example {
   *   label: "My Label",
   *   value: "myValue"
   * }
   */
  exampleData?: string;

  /**
   * This shows up in the popover as a user types into the properties panel.
   * This is a documentation field that helps users understand what type of data is accepted
   * by this property. Typescript notation is recommended.
   *
   * @example "Array<{ label: string; value: string; }>"
   */
  expectedType?: string;

  /**
   * The default value should match the dataType of the property.
   *
   * When dataType is "any", you must provide a string default value.
   * Your string will be interpreted based on the controlType, so if you have controlType "js-expr",
   * you should provide a string that is a valid javascript expression including quotations marks.
   */
  defaultValue?: T extends "number"
    ? number
    : T extends "boolean"
    ? boolean
    : string;
}

export interface PropertyForData<T extends DataType> {
  path: string;
  dataType: T;

  /**
   * The presence of this object determines whether or not this property
   * shows up in the Superblocks properties panel.
   **/
  propertiesPanelDisplay?: PropertiesPanelDisplay<T>;

  /**
   * A description of this property. This is used in the Superblocks properties panel
   * as well as in the custom component's autocomplete.
   **/
  description?: string;

  /**
   * By default, all your properties are readable from anywhere in Superblocks using dot notation
   * (e.g. `myComponent.myProperty`). If you want to hide a property from the outside world,
   * set this to false
   * @default true
   */
  isExternallyReadable?: boolean;

  /**
   * By default, all properties can have be used with Set Component Property and Reset Component to Default.
   * @default true
   **/
  isExternallySettable?: boolean;
}

export type Property =
  | PropertyForData<"string">
  | PropertyForData<"number">
  | PropertyForData<"boolean">
  | PropertyForData<"any">;

export interface ComponentConfig {
  id: UUID;

  /**
   * @example: "myComponent"
   */
  name: string;

  /**
   * @example "My Component"
   */
  displayName: string;

  /**
   * @example "components/myComponent/component.tsx"
   */
  componentPath: string;

  properties: Array<
    // Note to devs: The reason we are duplicating the Property type above is that it produces a better
    // error message. The user will see 'is not assignable to type PropertyForData<"string"> | PropertyForData<"number">'
    // instead of seeing "is not assignable to type Property"
    | PropertyForData<"string">
    | PropertyForData<"number">
    | PropertyForData<"boolean">
    | PropertyForData<"any">
  >;

  /**
   * @example [{
   *  label: "On Click",
   *  path: "onClick",
   * }]
   */
  events: Array<{
    label: string;
    path: string;
  }>;

  gridDimensions?: {
    initialColumns: number;
    initialRows: number;
  };
}
