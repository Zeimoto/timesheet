import { homedir } from "node:os";
import { join } from "node:path";
import * as fs from "fs-extra";
import { FileAccessError, TOKEN_CONFIG_PATH } from "./constants";

type BaseUrl = {
  superblocksBaseUrl: string;
};

type TokenWithBaseUrl = BaseUrl & {
  token: string;
};

export async function saveApiToken(superblocksBaseUrl: string, token?: string) {
  try {
    await fs.ensureDir(join(homedir(), ".superblocks"));
    if (token) {
      const tokenConfig: TokenWithBaseUrl = {
        superblocksBaseUrl,
        token,
      };
      await fs.writeJSON(join(homedir(), TOKEN_CONFIG_PATH), tokenConfig);
    } else {
      const tokenConfig: BaseUrl = {
        superblocksBaseUrl,
      };
      await fs.writeJSON(join(homedir(), TOKEN_CONFIG_PATH), tokenConfig);
    }
  } catch {
    throw new FileAccessError("Could not save token");
  }
}

export async function getLocalTokenWithUrlIfExists(): Promise<
  TokenWithBaseUrl | BaseUrl | undefined
> {
  try {
    return await getLocalTokenWithUrl();
  } catch {
    return undefined;
  }
}

export async function getLocalTokenWithUrl(): Promise<
  TokenWithBaseUrl | BaseUrl
> {
  try {
    const tokenConfig: TokenWithBaseUrl = await fs.readJSON(
      join(homedir(), TOKEN_CONFIG_PATH)
    );
    if (tokenConfig.token) {
      // user logged in
      return {
        token: tokenConfig.token,
        superblocksBaseUrl: tokenConfig.superblocksBaseUrl,
      };
    } else {
      // user not logged in, but set domain
      return {
        superblocksBaseUrl: tokenConfig.superblocksBaseUrl,
      };
    }
  } catch {
    throw new Error("No local API key found");
  }
}
