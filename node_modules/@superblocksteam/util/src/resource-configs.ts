import path from "path";
import * as fs from "fs-extra";
import { RESOURCE_CONFIG_PATH } from "./constants";

export type SuperblocksMetadata = {
  cliVersion: string;
};

export type SuperblocksResourceType = "APPLICATION" | "BACKEND";

export type VersionedResourceConfig = {
  location: string;
  resourceType: SuperblocksResourceType;
};

export type SuperblocksResourceConfig = {
  id: string;
};

export type SuperblocksBackendConfig = SuperblocksResourceConfig & {
  configType: "BACKEND";
};

export type SuperblocksApplicationConfig = SuperblocksResourceConfig & {
  configType: "APPLICATION";
  defaultPageId?: string;
  apis: Record<string, string>;
  pages?: Record<
    string,
    {
      id: string;
      name: string;
      apis: Record<string, string>;
    }
  >;
};

export type SuperblocksMonorepoConfig = {
  configType: "ROOT";
  resources: Record<string, VersionedResourceConfig>;
  metadata: SuperblocksMetadata;
};

export type SuperblocksConfig =
  | SuperblocksMonorepoConfig
  | SuperblocksApplicationConfig
  | SuperblocksBackendConfig;

/**
 * Get the Superblocks config file from the current directory (and optionally) hierarchy
 * @param checkParentDir Whether to recursively check the parent directory for a Superblocks config file
 */
export async function getSuperblocksMonorepoConfigJson(
  checkParentDir = false,
  pathPrefix = ""
): Promise<[SuperblocksMonorepoConfig, string]> {
  const absolutePath = path.resolve(pathPrefix);

  let hasReachedFilesystemRoot = false;
  try {
    hasReachedFilesystemRoot = path.parse(absolutePath).root == absolutePath;
  } catch {
    throw new Error("Could not parse path " + absolutePath);
  }

  let superblocksConfig;
  if (
    (pathPrefix && !fs.existsSync(absolutePath)) ||
    hasReachedFilesystemRoot
  ) {
    throw new Error(
      "No Superblocks config file found in current directory hierarchy " +
        pathPrefix
    );
  }

  const attemptedPath = path.join(absolutePath, RESOURCE_CONFIG_PATH);
  try {
    superblocksConfig = await fs.readJSON(attemptedPath);
    if (superblocksConfig.configType !== "ROOT") {
      throw new Error("Not the root Superblocks config file");
    }
    return [superblocksConfig as SuperblocksMonorepoConfig, attemptedPath];
  } catch {
    if (!checkParentDir) {
      // no superblocks config file found
      throw new Error(
        "No Superblocks config file found in current directory " + attemptedPath
      );
    }
    return getSuperblocksMonorepoConfigJson(true, "../" + pathPrefix);
  }
}

export async function getSuperblocksApplicationConfigJson(
  applicationPath?: string
): Promise<SuperblocksApplicationConfig> {
  let superblocksConfig;
  try {
    const configPath = applicationPath
      ? path.join(applicationPath, RESOURCE_CONFIG_PATH)
      : RESOURCE_CONFIG_PATH;
    superblocksConfig = await fs.readJSON(configPath);
  } catch {
    // no superblocks config file found
    throw new Error(
      "This command must be run within a Superblocks app directory."
    );
  }

  if (superblocksConfig.configType !== "APPLICATION") {
    throw new Error(
      "Please execute this command within a Superblocks application directory."
    );
  }

  return superblocksConfig as SuperblocksApplicationConfig;
}

export async function getSuperblocksApplicationConfigIfExists(
  applicationPath: string
): Promise<SuperblocksApplicationConfig | undefined> {
  let superblocksConfig: SuperblocksApplicationConfig | undefined;
  try {
    const configPath = applicationPath
      ? path.join(applicationPath, RESOURCE_CONFIG_PATH)
      : RESOURCE_CONFIG_PATH;
    superblocksConfig = await fs.readJSON(configPath);
  } catch {
    // no superblocks config file found
  }

  if (superblocksConfig?.configType !== "APPLICATION") {
    return undefined;
  }

  return superblocksConfig as SuperblocksApplicationConfig;
}

export async function getSuperblocksBackendConfigJson(): Promise<SuperblocksBackendConfig> {
  let superblocksConfig;
  try {
    superblocksConfig = await fs.readJSON(RESOURCE_CONFIG_PATH);
  } catch {
    // no superblocks config file found
    throw new Error(
      "This command must be run within a Superblocks backend resource (workflow/job) directory."
    );
  }

  if (superblocksConfig.configType !== "BACKEND") {
    throw new Error(
      "Please execute this command within a Superblocks backend resource (workflow/job) directory."
    );
  }

  return superblocksConfig as SuperblocksBackendConfig;
}

export async function getSuperblocksResourceConfigIfExists(): Promise<
  SuperblocksResourceConfig | undefined
> {
  let config: SuperblocksResourceConfig | undefined;
  try {
    config = await getSuperblocksApplicationConfigJson();
  } catch {
    // Noop
  }
  try {
    config = await getSuperblocksBackendConfigJson();
  } catch {
    // Noop
  }
  return config;
}
