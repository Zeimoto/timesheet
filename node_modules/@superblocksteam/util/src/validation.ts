import Ajv, { Schema } from "ajv";
import { DataValidateFunction } from "ajv/dist/types";
import betterAjvErrors from "better-ajv-errors";
import { isReservedPropertyName, isValidIdentifier } from "./identifiers";

const ajv = new Ajv();

ajv.addKeyword({
  keyword: "stringFormat",
  compile: (schema: any) => {
    let validateFunc: DataValidateFunction;
    // schema is the value assigned to stringFormat in the schema
    if (schema === "identifier") {
      validateFunc = (data: any) => {
        if (typeof data != "string") return false;
        if (!isValidIdentifier(data)) {
          validateFunc.errors = [
            {
              keyword: "format",
              message:
                "must be a valid identifier starting with a-z or underscore and containing only a-z, 0-9, and underscores",
            },
          ];
          return false;
        }
        if (isReservedPropertyName(data)) {
          validateFunc.errors = [
            {
              keyword: "format",
              message:
                "must not match a reserved property path (see https://docs.superblocks.com/applications/custom-components/faq#what-is-a-reserved-property)",
            },
          ];
          return false;
        }
        return true;
      };
    } else {
      throw new Error(`Unknown stringFormat: ${schema}`);
    }
    return validateFunc;
  },
  errors: true,
});

const componentSchema: Schema = {
  type: "object",
  properties: {
    id: { type: "string" },
    name: { type: "string" },
    displayName: { type: "string" },
    componentPath: { type: "string" },
    properties: {
      type: "array",
      items: {
        $ref: "#/definitions/Property",
      },
    },
    events: {
      type: "array",
      items: {
        $ref: "#/definitions/EventHandler",
      },
    },
    gridDimensions: {
      type: "object",
      properties: {
        initialColumns: { type: "number" },
        initialRows: { type: "number" },
      },
      additionalProperties: false,
      required: ["initialColumns", "initialRows"],
    },
  },
  required: [
    "id",
    "name",
    "displayName",
    "componentPath",
    "properties",
    "events",
  ],
  additionalProperties: false,
  definitions: {
    Property: {
      properties: {
        path: { $ref: "#/definitions/Identifier" },
        dataType: { enum: ["number", "boolean", "string", "any"] },
        propertiesPanelDisplay: {
          type: "object",
          properties: {
            label: { type: "string" },
            controlType: { enum: ["text", "js-expr", "switch"] },
            defaultValue: {
              oneOf: [
                {
                  type: "string",
                },
                {
                  type: "boolean",
                },
                {
                  type: "number",
                },
              ],
            },
            placeholder: { type: "string" },
            exampleData: { type: "string" },
            expectedType: { type: "string" },
          },
          required: ["controlType", "label"],
          additionalProperties: false,
        },
        description: { type: "string" },
        isExternallySettable: { type: "boolean" },
        isExternallyReadable: { type: "boolean" },
      },
      type: "object",
      additionalProperties: false,
      required: ["path", "dataType"],
    },
    EventHandler: {
      properties: {
        label: { type: "string" },
        path: { $ref: "#/definitions/Identifier" },
      },
      type: "object",
      additionalProperties: false,
      required: ["label", "path"],
    },
    Identifier: {
      type: "string",
      stringFormat: "identifier",
    },
  },
};

const validate = ajv.compile(componentSchema);

export function validateCustomComponents(data: any): {
  valid: boolean;
  message?: string;
} {
  const valid = validate(data);
  if (!valid) {
    return {
      valid: false,
      message: betterAjvErrors(componentSchema, data, validate.errors as any, {
        indent: 2,
      }),
    };
  }
  return { valid: true };
}
