import { dataTypeDefinions, type DataType } from "./data-types";
import { ComponentConfig } from "./types";

const indent = (str: string, spaces: number) => {
  const spacesString = " ".repeat(spaces);

  return str
    .split("\n")
    .map((line) => `${spacesString}${line}`)
    .join("\n");
};

function renderInputTypeAsTS(
  name: string,
  type: DataType,
  trailingChars: string,
  indentSpaces: number
) {
  let { tsType } = dataTypeDefinions[type];
  if (["number", "string"].includes(type)) {
    tsType += " | null";
  }
  return indent(`${name}: ${tsType}${trailingChars}`, indentSpaces);
}

export function generateComponentTypesFile(config: ComponentConfig) {
  const properties = config.properties ?? [];
  const eventHandlers = config.events ?? [];
  return `// GENERATED CODE -- DO NOT EDIT!
//
// This file is automatically generated by the Superblocks CLI
// Use the \`superblocks components watch\` command to regenerate this file from its source in config.ts

// All properties of your component are defined here.
// These are the properties which are surfaced in the Superblocks properties panel
// and can be referenced throughout your Superblocks Application
export type Props = {
${properties
  .map((v) => renderInputTypeAsTS(v.path, v.dataType, ";", 2) + "\n")
  .join("")}};

export type EventTriggers = {
  // Call the subsequent function(s) to trigger event(s) in Superblocks from your component.
  // These events can be wired up to event handlers in your Superblocks App
${
  eventHandlers.length === 0
    ? "  // Note: no event handlers defined\n"
    : eventHandlers
        .map((v: any) => indent(v.path, 2) + ": () => void;" + "\n")
        .join("")
}};
`;
}
