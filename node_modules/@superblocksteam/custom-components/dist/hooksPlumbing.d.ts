interface MutableRefObject<T> {
    current: T;
}
/** The size of the area that is available for the custom component to render in */
export interface WidgetSize {
    /** The width in grid units */
    widthGrid: number;
    /** The height in grid units */
    heightGrid: number;
    /** The width in pixels */
    widthPx: number;
    /** The height in pixels */
    heightPx: number;
}
/**
 * The information that is passed down to each custom component. This information is specific to the widget that is
 * currently being rendered. This is the information that is used to implement all superblocks hooks for custom components.
 * We pass that information down via a React Context.
 */
interface CCRenderingContext {
    widgetId: string;
    /** This is the value returned by the `useSuperblocksContext` hook */
    superblocksContext: any;
    /**
     * This is the set of subscribers to the `isLoading` property: each time the value of `isLoading` changes, these functions
     * will be called. This is used internally by the `useSuperblocksIsLoading` hook.
     */
    isLoadingSubscribers: Set<(isLoading: boolean) => void>;
    /** The current value of the `isLoading` property. Is is used internally by the `useSuperblocksIsLoading` hook */
    isLoadingRef: MutableRefObject<boolean>;
    /**
     * The set of subscribers to the widget size object: each time the size of the widget changes, we need to
     * call these functions to notify all custom components that have expressed interest in being notified of such
     * changes. It is used internally by the `useSuperblocksWidgetSize` hook
     */
    widgetSizeSubscribers: Set<(widgetSize: WidgetSize) => void>;
    /** The current size of the widget. Is is used internally by the `useSuperblocksWidgetSize` hook */
    widgetSizeRef: MutableRefObject<WidgetSize>;
}
/**
 * A React hook that is used internally by all superblocks hooks for custom components.
 * @returns The React library namespace object used by custom components and the CCRenderingContext object provided by the UI
 */
export declare function useHooksInternalContext(): {
    React: any;
    ccRenderingContext: CCRenderingContext;
};
export {};
